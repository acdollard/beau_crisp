---
import Layout from "../layouts/Layout.astro";

interface SpotifyEpisode {
  name: string;
  description: string;
  release_date: string;
  external_urls: {
    spotify: string;
  };
  images: Array<{
    url: string;
    height: number;
    width: number;
  }>;
  id: string;
}

const authOptions = {
  method: "POST",
  url: "https://accounts.spotify.com/api/token",
  headers: {
    Authorization:
      "Basic " +
      Buffer.from(
        import.meta.env.SPOTIFY_CLIENT_ID +
          ":" +
          import.meta.env.SPOTIFY_CLIENT_SECRET
      ).toString("base64"),
    "Content-Type": "application/x-www-form-urlencoded",
  },
  body: new URLSearchParams({
    grant_type: "client_credentials",
  }).toString(),
};

const response = await fetch(authOptions.url, {
  method: authOptions.method,
  headers: authOptions.headers,
  body: authOptions.body,
});
const data = await response.json();
const accessToken = data.access_token;

const podcastEpisodes = await fetch(
  "https://api.spotify.com/v1/shows/6kVyePtw85mqjZvWqqQa7s/episodes",
  {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  }
);

const episodesData = await podcastEpisodes.json();
---

<Layout title="Podcast - Buried In The Bones">
  <section class="min-h-[60vh] pt-48 hero-image bg-center">
    <div class="flex flex-col items-end justify-center w-[80%]">
      <h1
        class="text-7xl md:text-8xl font-customFont animate-fade-in-left text-floralWhite z-10"
      >
        Podcast
      </h1>
    </div>
  </section>

  <section class="container mx-auto py-16 rounded-md bg-floralWhite">
    <h2
      class="text-6xl font-customFont uppercase text-center mb-12 px-12 text-slate-800"
    >
      Latest Episodes
    </h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 px-4">
      {
        episodesData.items.map(
          (episode: SpotifyEpisode) =>
            episode && (
              <div class="bg-white p-6 rounded-sm shadow-lg flex flex-col justify-between">
                <iframe
                  style="border-radius:12px"
                  src={`https://open.spotify.com/embed/episode/${episode.id}/video?utm_source=generator`}
                  width="100%"
                  height="300"
                  allowfullscreen=""
                  allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                  loading="lazy"
                  class="mb-4"
                />
                <h3 class="text-2xl font-customFont mb-2">{episode.name}</h3>
                <div class="relative">
                  <p class="text-gray-600 mb-4 overflow-hidden transition-all duration-300 description-text">
                    {episode.description}
                  </p>
                  <button
                    class="text-ebony hover:text-ebony text-sm font-medium transition-colors read-more-btn"
                    data-description={episode.description}
                  >
                    Read More
                  </button>
                </div>
                <div class="flex justify-between items-center mt-auto">
                  <span class="text-sm text-gray-500">
                    {new Date(episode.release_date).toLocaleDateString()}
                  </span>
                  <a
                    href={episode.external_urls.spotify}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="bg-ebony hover:bg-ebony text-white px-4 py-2 transition-colors rounded-sm"
                  >
                    Listen In Spotify
                  </a>
                </div>
              </div>
            )
        )
      }
    </div>
  </section>
</Layout>

<style>
  .hero-image {
    background-image: url("../assets/bjj-drawing.jpeg");
    background-size: cover;
    background-repeat: repeat-x;
  }

  .description-text {
    max-height: 4.5em;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  .description-text.expanded {
    max-height: none;
    -webkit-line-clamp: unset;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const readMoreButtons = document.querySelectorAll(".read-more-btn");

    readMoreButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const descriptionText = button.previousElementSibling;
        const isExpanded = descriptionText?.classList.contains("expanded");

        descriptionText?.classList.toggle("expanded");
        button.textContent = isExpanded ? "Read More" : "Show Less";
      });
    });
  });
</script>
