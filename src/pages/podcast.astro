---
import Layout from "../layouts/Layout.astro";

interface SpotifyEpisode {
  name: string;
  description: string;
  release_date: string;
  external_urls: {
    spotify: string;
  };
  images: Array<{
    url: string;
    height: number;
    width: number;
  }>;
  id: string;
}

const authOptions = {
  method: "POST",
  url: "https://accounts.spotify.com/api/token",
  headers: {
    Authorization:
      "Basic " +
      Buffer.from(
        import.meta.env.SPOTIFY_CLIENT_ID +
          ":" +
          import.meta.env.SPOTIFY_CLIENT_SECRET
      ).toString("base64"),
    "Content-Type": "application/x-www-form-urlencoded",
  },
  body: new URLSearchParams({
    grant_type: "client_credentials",
  }).toString(),
};

const response = await fetch(authOptions.url, {
  method: authOptions.method,
  headers: authOptions.headers,
  body: authOptions.body,
});
const data = await response.json();
const accessToken = data.access_token;

const podcastEpisodes = await fetch(
  "https://api.spotify.com/v1/shows/6kVyePtw85mqjZvWqqQa7s/episodes",
  {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  }
);

const episodesData = await podcastEpisodes.json();
---

<Layout title="Podcast - Buried In The Bones">
  <section class="min-h-[50vh] pt-48 hero-image bg-center">
    <div class="mx-auto">
      <h1
        class="text-5xl md:text-8xl font-customFont animate-fade-in mb-8 md:mt-16 text-center text-rose-600 bg-stone-900 bg-opacity-80 block w-fit mx-auto p-4 rounded-lg"
      >
        Podcast
      </h1>
    </div>
  </section>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 px-4 py-20">
    {
      episodesData.items.map(
        (episode: SpotifyEpisode) =>
          episode && (
            <div class="bg-white p-6 rounded-lg shadow-lg flex flex-col justify-between">
              <iframe
                style="border-radius:12px"
                src={`https://open.spotify.com/embed/episode/${episode.id}/video?utm_source=generator`}
                width="100%"
                height="300"
                allowfullscreen=""
                allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                loading="lazy"
                class="mb-4"
              />
              <h3 class="text-2xl font-customFont mb-2">{episode.name}</h3>
              <div class="relative">
                <p class="text-gray-600 mb-4 overflow-hidden transition-all duration-300 description-text">
                  {episode.description}
                </p>
                <button
                  class="text-rose-600 hover:text-rose-700 text-sm font-medium transition-colors read-more-btn"
                  data-description={episode.description}
                >
                  Read More
                </button>
              </div>
              <div class="flex justify-between items-center mt-auto">
                <span class="text-sm text-gray-500">
                  {new Date(episode.release_date).toLocaleDateString()}
                </span>
                <a
                  href={episode.external_urls.spotify}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bg-rose-800 hover:bg-rose-700 text-white px-4 py-2 transition-colors rounded-lg"
                >
                  Listen In Spotify
                </a>
              </div>
            </div>
          )
      )
    }
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const readMoreButtons = document.querySelectorAll(".read-more-btn");

    readMoreButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const descriptionText = button.previousElementSibling;
        const isExpanded = descriptionText?.classList.contains("expanded");

        descriptionText?.classList.toggle("expanded");
        button.textContent = isExpanded ? "Read More" : "Show Less";
      });
    });
  });
</script>

<style>
  .hero-image {
    background-image: url("../assets/cactus.png");
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fadeInUp 1s ease-out forwards;
  }

  .description-text {
    max-height: 4.5em;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  .description-text.expanded {
    max-height: none;
    -webkit-line-clamp: unset;
  }
</style>
