---
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import { createClient } from "@sanity/client";
import bjj from "../assets/bjj-sepia.jpg";
import { requestHasLocale } from "astro:i18n";

interface Post {
  title: string;
  slug: string;
  publishedAt: string;
  excerpt: string;
  mainImage: { asset: { url: string } };
}

const client = createClient({
  projectId: "agaaxyz0",
  dataset: "production",
  apiVersion: "2024-03-08",
  useCdn: true,
});

const posts = await client.fetch(`
  *[_type == "post"] | order(publishedAt desc) {
    title,
    slug,
    publishedAt,
    excerpt,
    mainImage {
      asset-> {
        _id,
        url
      }
    }
  }[0...3]
`);

const authOptions = {
  method: "POST",
  url: "https://accounts.spotify.com/api/token",
  headers: {
    Authorization:
      "Basic " +
      Buffer.from(
        import.meta.env.SPOTIFY_CLIENT_ID +
          ":" +
          import.meta.env.SPOTIFY_CLIENT_SECRET
      ).toString("base64"),
    "Content-Type": "application/x-www-form-urlencoded",
  },
  body: new URLSearchParams({
    grant_type: "client_credentials",
  }).toString(),
};

console.log("Client ID:", import.meta.env.SPOTIFY_CLIENT_ID);
console.log(
  "Client Secret:",
  import.meta.env.SPOTIFY_CLIENT_SECRET ? "Set" : "Not Set"
);

const response = await fetch(authOptions.url, {
  method: authOptions.method,
  headers: authOptions.headers,
  body: authOptions.body,
});
const data = await response.json();
const accessToken = data.access_token;

console.log(data);
---

<Layout title="Beau Crisp - Strength & Conditioning">
  <section
    class="h-[85vh] bg-hero-image-2 bg-bottom bg-cover flex flex-col justify-center"
  >
    <div class="flex flex-col items-center justify-center py-8">
      <div class="h-[44px] sm:h-[66px] md:h-[115px]">
        <h1
          class="text-4xl sm:text-6xl md:text-8xl text-center font-customFont text-slate-200 text-shadow-lg px-4"
        >
          <a
            href=""
            class="typewrite"
            data-period="2000"
            data-type='["BURIED IN THE BONES. . . ", "MOVE OR EXPIRE. . . ", "COMPLACENCY IS EVIL. . . "]'
          >
            <span class="wrap"></span>
          </a>
        </h1>
      </div>
      <h2
        class="text-center text-xl sm:text-2xl md:text-4xl text-slate-200 my-4 px-4 text-shadow-lg"
      >
        Training For Comprehensive Strength.
        <br />Writing For A Comprehensive Mind.
      </h2>
      <button
        class="bg-rose-800 hover:bg-rose-700 text-white hover:text-white px-6 py-4 mt-4 transition-colors duration-200 shadow-lg"
      >
        GET STRONG
      </button>
    </div>
  </section>

  <section class="container mx-auto pb-16 px-8">
    <h2
      class="sm:text-4xl md:text-6xl font-customFont uppercase text-center px-12 text-slate-800 text-shadow-sm py-24"
    >
      Buried In The Bones is a Podcast about the <br /><span
        class="text-rose-700 text-shadow-lg">Philosophy of Effort.</span
      >
    </h2>

    <div class="flex flex-col md:flex-row justify-center gap-8 mx-auto">
      <div class="w-full md:w-1/2">
        <Image
          src={bjj}
          alt="BJJ"
          class="opacity-90 w-full h-full object-cover"
          width={800}
          height={800}
          fit="cover"
        />
      </div>
      <!--       <div class="w-full md:w-1/2">
        {
          posts.map((post: any) => (
            <div class="bg-stone-200 p-4 my-8 rounded-lg shadow-lg">
              <h3 class="text-lg font-bold">{post.title}</h3>
              <p class="text-sm text-gray-600">{post.excerpt}</p>
              <a
                href={`/blog/${post.slug.current}`}
                class="inline-block mt-4 text-gray-900 font-medium hover:underline"
              >
                Read more â†’
              </a>
            </div>
          ))
        }
      </div> -->
      <div class="w-full md:w-1/2">
        <h3
          class="text-5xl uppercase text-center font-customFont text-slate-800 mb-8"
        >
          Latest Podcast Episodes
        </h3>
        <div class="p-4 my-8">
          <iframe
            style="border-radius:12px"
            src="https://open.spotify.com/embed/episode/3HHtK8fAooxlh8Ez2Eacmi/video?utm_source=generator"
            width="100%"
            height="351"
            allowfullscreen=""
            allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
            loading="lazy"></iframe>
        </div>
        <div class="p-4 my-8">
          <iframe
            style="border-radius:12px"
            src="https://open.spotify.com/embed/episode/67lzxa9SC5tNd2qLQOVsdw/video?utm_source=generator"
            width="100%"
            height="351"
            allowfullscreen=""
            allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
            loading="lazy"></iframe>
        </div>
        <div class="p-4 my-8">
          <iframe
            style="border-radius:12px"
            src="https://open.spotify.com/embed/episode/2aENdCBArg806rTbiQ92IL/video?utm_source=generator"
            width="100%"
            height="351"
            allowfullscreen=""
            allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
            loading="lazy"></iframe>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script type="text/javascript">
  const TxtType = function (el, toRotate, period) {
    this.toRotate = toRotate;
    this.el = el;
    this.loopNum = 0;
    this.period = parseInt(period, 10) || 2000;
    this.txt = "";
    this.tick();
    this.isDeleting = false;
  };

  TxtType.prototype.tick = function () {
    let i = this.loopNum % this.toRotate.length;
    let fullTxt = this.toRotate[i];

    if (this.isDeleting) {
      this.txt = fullTxt.substring(0, this.txt.length - 1);
    } else {
      this.txt = fullTxt.substring(0, this.txt.length + 1);
    }

    this.el.innerHTML = '<span class="wrap">' + this.txt + "</span>";

    let that = this;
    let delta = 200 - Math.random() * 100;

    if (this.isDeleting) {
      delta /= 2;
    }

    if (!this.isDeleting && this.txt === fullTxt) {
      delta = this.period;
      this.isDeleting = true;
    } else if (this.isDeleting && this.txt === "") {
      this.isDeleting = false;
      this.loopNum++;
      delta = 500;
    }

    setTimeout(function () {
      that.tick();
    }, delta);
  };

  window.onload = function () {
    const elements = document.getElementsByClassName("typewrite");
    for (let i = 0; i < elements.length; i++) {
      const toRotate = elements[i].getAttribute("data-type");
      const period = elements[i].getAttribute("data-period");
      if (toRotate) {
        new TxtType(elements[i], JSON.parse(toRotate), period);
      }
    }
    // INJECT CSS
    var css = document.createElement("style");
    css.type = "text/css";
    css.innerHTML = ".typewrite > .wrap { border-right: 0.08em solid #27272a}";
    document.body.appendChild(css);
  };
</script>
